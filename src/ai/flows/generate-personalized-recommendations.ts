
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A movie recommendation AI agent that provides personalized movie titles based on user preferences.
 *
 * - generatePersonalizedRecommendations - A function that generates personalized movie recommendation titles.
 * - GeneratePersonalizedRecommendationsInput - The input type for the generatePersonalizedRecommendations function.
 * - GeneratePersonalizedRecommendationsOutput - The return type for the generatePersonalizedRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GeneratePersonalizedRecommendationsInputSchema = z.object({
  movieTypes: z
    .string()
    .describe("A comma separated list of the user's preferred movie types, derived from their rated movies."),
});
export type GeneratePersonalizedRecommendationsInput = z.infer<typeof GeneratePersonalizedRecommendationsInputSchema>;

// Output schema now focuses on returning a list of movie titles.
// The frontend will then try to fetch details for these titles from Firestore,
// or use AI to generate assets if not found.
const GeneratePersonalizedRecommendationsOutputSchema = z.object({
  recommendations: z.array(z.string()).describe('A list of 5 recommended movie titles. These should be existing, well-known movies if possible.'),
});
export type GeneratePersonalizedRecommendationsOutput = z.infer<typeof GeneratePersonalizedRecommendationsOutputSchema>;

export async function generatePersonalizedRecommendations(input: GeneratePersonalizedRecommendationsInput): Promise<GeneratePersonalizedRecommendationsOutput> {
  return generatePersonalizedRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generatePersonalizedRecommendationsPrompt',
  input: {schema: GeneratePersonalizedRecommendationsInputSchema},
  output: {schema: GeneratePersonalizedRecommendationsOutputSchema},
  prompt: `You are a movie recommendation expert. Based on the user's stated preferred movie types, generate a list of 5 movie titles as recommendations.
These movies should ideally be existing and relatively well-known films that could be found in a movie database.

Preferred Movie Types: {{{movieTypes}}}

Provide only the list of movie titles. Do not provide summaries, poster descriptions, or any other explanation here.
Example output format: ["Movie Title A", "Another Movie Title B", "Film C", "Movie D", "The Fifth Movie"]
`,
});

const generatePersonalizedRecommendationsFlow = ai.defineFlow(
  {
    name: 'generatePersonalizedRecommendationsFlow',
    inputSchema: GeneratePersonalizedRecommendationsInputSchema,
    outputSchema: GeneratePersonalizedRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    // Ensure the output is an array of strings, even if the model doesn't perfectly adhere to the Zod schema.
    // This is a basic check; more robust parsing might be needed depending on model behavior.
    if (output && Array.isArray(output.recommendations) && output.recommendations.every(item => typeof item === 'string')) {
      return output;
    }
    // Fallback if the output structure is not as expected
    console.warn("AI output for recommendations was not in the expected format. Returning empty array.");
    return { recommendations: [] };
  }
);

    
    